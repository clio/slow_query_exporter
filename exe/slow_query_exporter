#!/usr/bin/env ruby

require 'daemons'
require 'fileutils'
require 'gelf'
require 'optparse'
require 'syslog'
require 'slow_query_exporter'

RUN_DIRECTORY = "/var/run/slow_query_exporter"
PROGRESS_FILE = "#{RUN_DIRECTORY}/last_timestamp"

$graylog_host = "localhost"
$graylog_port = 12201
$delay = 0.1
$verbose = false
$foreground = false

HELP_TEXT = "Usage: slow_query_exporter [-fv] [-d delay] [-h host] [-p port] slow_query.log
Options:
    -h, --host         The Graylog host
    -p, --port         The Graylog port
    -d, --delay        An interval to pause after each GELF message, in (possibly fractional) seconds
    -v, --verbose      Print entries to stdout as they're parsed
    -f, --foreground   Don't daemonize on startup
    -?, --help         Display this help text
"

OptionParser.new do |opts|
  opts.banner = HELP_TEXT

  opts.on("-h", "--host") { |host| $graylog_host = host }
  opts.on("-p", "--port") { |port| $graylog_port = port }
  opts.on("-d", "--delay") { |delay| $delay = delay.to_f }
  opts.on("-v", "--verbose") { $verbose = true }
  opts.on("-f", "--foreground") { $foreground = true }
  opts.on("-?", "--help") do
    $stderr.puts(HELP_TEXT)
    exit
  end
end.parse!

if ARGV.empty?
  $stderr.puts(HELP_TEXT)
  exit 1
end

Daemons.daemonize(dir_mode: :normal, dir: RUN_DIRECTORY) unless $foreground
Syslog.open("slow_query_exporter", Syslog::LOG_PID | Syslog::LOG_PERROR, Syslog::LOG_DAEMON)
last_timestamp = begin
                   IO.read(PROGRESS_FILE).to_i
                 rescue Errno::ENOENT
                   0
                 end

# We touch the logfile to make sure it exists before we start. Otherwise, "tail -F" will die.
logfile = ARGV[0]
FileUtils.touch(logfile)

gelf = GELF::Notifier.new($graylog_host, $graylog_port, "WAN")
parser = SlowQueryExporter::QueryParser.new

begin
  tail = IO.popen(["tail", "-F", "-n", "+0", logfile])
  tail.each_line do |line|
    parser.parse_line(line)
    query = parser.pop_finished_query
    if query && query.timestamp >= last_timestamp
      last_timestamp = query.timestamp
      File.open(PROGRESS_FILE, "w") { |f| f.puts(last_timestamp) }

      puts query.gelf_attributes.inspect, "\n" if $verbose
      gelf.notify!(query.gelf_attributes)
      sleep $delay    # avoids swamping the Graylog server
    end
  end

ensure
  Process.kill("INT", tail.pid) if tail
end
